package {{.Provider}}

import (
	"context"
	"terraform-provider-{{.Provider}}/models"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource = &{{.Resource}}Resource{}
)

// New{{.Resource}}Resource is a helper function to simplify the provider implementation.
func New{{.Resource}}Resource() resource.Resource {
	return &{{.Resource}}Resource{}
}

// {{.Resource}}Resource is the resource implementation.
type {{.Resource}}Resource struct {
	p *{{.Provider}}Provider
}

// Configure implements resource.ResourceWithConfigure
func (r *{{.Resource}}Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	r.p = req.ProviderData.(*{{.Provider}}Provider)
}

// Metadata returns the resource type name.
func (r *{{.Resource}}Resource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{.Resource}}"
}

// Schema defines the schema for the resource.
func (r *{{.Resource}}Resource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Resource for managing {{.Resource}} on OpenManage Enterprise.",
		Version:             1,
		Attributes:          map[string]schema.Attribute{},
	}
}

// Create creates the resource and sets the initial Terraform state.
func (r *{{.Resource}}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Trace(ctx, "resource_{{.Resource}} create : Started")
	//Get Plan Data
	var plan, state models.{{.Model}}
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "resource_{{.Resource}} create: updating state finished, saving ...")
	// Save into State
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	tflog.Trace(ctx, "resource_{{.Resource}} create: finish")
}

// Read refreshes the Terraform state with the latest data.
func (r *{{.Resource}}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Trace(ctx, "resource_{{.Resource}} read: started")
	var state models.{{.Model}}
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "resource_{{.Resource}} read: finished reading state")
	//Save into State
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	tflog.Trace(ctx, "resource_{{.Resource}} read: finished")
}

// Update updates the resource and sets the updated Terraform state on success.
func (r *{{.Resource}}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	//Get state Data
	tflog.Trace(ctx, "resource_{{.Resource}} update: started")
	var state, plan models.{{.Model}}
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get plan Data
	diags = req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "resource_{{.Resource}} update: finished state update")
	//Save into State
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	tflog.Trace(ctx, "resource_{{.Resource}} update: finished")
}

// Delete deletes the resource and removes the Terraform state on success.
func (r *{{.Resource}}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Trace(ctx, "resource_{{.Resource}} delete: started")
	// Get State Data
	var state models.TemplateDeployment
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	
	resp.State.RemoveResource(ctx)
	tflog.Trace(ctx, "resource_{{.Resource}} delete: finished")
}
